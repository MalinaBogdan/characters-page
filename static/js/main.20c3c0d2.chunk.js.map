{"version":3,"sources":["components/Comment/Comment.jsx","components/CommentList/CommentList.jsx","components/CommentBox/CommentBox.jsx","components/Character/Character.jsx","components/CharactersList/CharactersLis.jsx","api/api.js","components/CharactersPage/CharactersPage.jsx","App.js","index.js"],"names":["Comment","comment","className","CommentList","comments","map","shortid","generate","CommentBox","useState","newComment","setNewComment","setComments","error","setError","useEffect","onChange","event","target","value","placeholder","undefined","onClick","trim","Character","name","birthYear","CharactersList","characters","character","birth_year","getCharacters","url","fetch","then","response","ok","json","Error","status","statusText","CharactersPage","setCharacters","results","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6VAGaA,EAAU,SAAC,GAAe,IAAdC,EAAa,EAAbA,QACvB,OACE,oBACEC,UAAU,qBADZ,UAGE,8CAHF,IAG6BD,MCJpBE,EAAc,SAAC,GAC1B,OADyC,EAAdC,SAEhBC,KAAI,SAAAJ,GAAO,OAClB,cAAC,EAAD,CAEEA,QAASA,GADJK,IAAQC,gBCJRC,G,MAAa,WAAO,IAAD,EACMC,mBAAS,IADf,mBACvBC,EADuB,KACXC,EADW,OAEEF,mBAAS,IAFX,mBAEvBL,EAFuB,KAEbQ,EAFa,OAGJH,oBAAS,GAHL,mBAGvBI,EAHuB,KAGhBC,EAHgB,KAK9BC,qBAAU,WACRD,GAAS,KACR,CAACJ,IAeJ,OACE,sBAAKR,UAAU,2BAAf,UACE,cAAC,EAAD,CACEE,SAAUA,IAEZ,0BACEY,SAVe,SAACC,GACpBN,EAAcM,EAAMC,OAAOC,QAUvBA,MAAOT,EACPU,YAAaP,EAAQ,+BAA4BQ,IACnD,wBAAQC,QAtBO,WACE,KAAfZ,IACFE,EAAY,GAAD,mBAAKR,GAAL,CAAeM,EAAWa,UACrCZ,EAAc,KAGhBG,GAAS,IAgBP,8BC9BOU,G,MAAY,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,UAC/B,OACE,sBAAKxB,UAAU,4BAAf,UACE,wCAAWuB,KACX,iDAAoBC,KACpB,cAAC,EAAD,SCLOC,EAAiB,SAAC,GAC7B,OAD8C,EAAhBC,WAEjBvB,KAAI,SAAAwB,GAAS,OACtB,cAAC,EAAD,CAEEJ,KAAMI,EAAUJ,KAChBC,UAAWG,EAAUC,YAFhBxB,IAAQC,gBCKRwB,EAAgB,kBAZZC,EAaP,eAZDC,MAAM,GAAD,OAHE,qBAGF,OAAcD,IACvBE,MAAK,SAAAC,GACJ,GAAIA,EAASC,GAEX,OAAOD,EAASE,OAGlB,MAAM,IAAIC,MAAJ,UAAaH,EAASI,OAAtB,cAAkCJ,EAASK,gBARvC,IAACR,GCGJS,G,MAAiB,WAAO,IAAD,EACEhC,mBAAS,IADX,mBAC3BmB,EAD2B,KACfc,EADe,KAQlC,OALA3B,qBAAU,WACRgB,IACGG,MAAK,SAAAN,GAAU,OAAIc,EAAcd,EAAWe,cAC9C,IAGD,yBAASzC,UAAU,OAAnB,SACE,cAAC,EAAD,CACE0B,WAAYA,QCPLgB,MANf,WACE,OACE,cAAC,EAAD,KCAJC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.20c3c0d2.chunk.js","sourcesContent":["import React from 'react';\nimport './comment.scss';\n\nexport const Comment = ({comment}) => {\n  return (\n    <p\n      className='character__comment'\n    >\n      <strong>Comment:</strong> {comment}\n    </p>\n  )\n}\n","import React from 'react';\nimport shortid from 'shortid';\nimport { Comment } from \"../Comment\";\n\nexport const CommentList = ({comments}) => {\n  return (\n    comments.map(comment => (\n      <Comment\n        key={shortid.generate()}\n        comment={comment}\n      />\n    ))\n  )\n}\n","import { useState, useEffect } from 'react';\nimport { CommentList } from \"../CommentList\";\nimport './commentBox.scss';\n\nexport const CommentBox = () => {\n  const [newComment, setNewComment] = useState('');\n  const [comments, setComments] = useState([]);\n  const [error, setError] = useState(false);\n\n  useEffect(() => {\n    setError(false);\n  }, [newComment])\n\n  const addComment = () => {\n    if (newComment !== '') {\n      setComments([...comments, newComment.trim()]);\n      setNewComment('');\n    }\n\n    setError(true)\n  }\n\n  const handleChange = (event) => {\n    setNewComment(event.target.value)\n  }\n\n  return(\n    <div className='character__comment-block'>\n      <CommentList\n        comments={comments}\n      />\n      <textarea\n        onChange={handleChange}\n        value={newComment}\n        placeholder={error ? 'Comment cannot be empty' : undefined}/>\n      <button onClick={addComment}>add comment</button>\n    </div>\n  )\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { CommentBox } from \"../CommentBox\";\nimport './character.scss';\n\nexport const Character = ({name, birthYear}) => {\n  return (\n    <div className='main__character character'>\n      <h2>Name: {name}</h2>\n      <h3>Year of birth: {birthYear}</h3>\n      <CommentBox />\n    </div>\n  )\n}\n\nCharacter.propTypes = {\n  name: PropTypes.string.isRequired,\n  birthYear: PropTypes.string.isRequired,\n}\n","import React from 'react';\nimport shortid from 'shortid';\nimport PropTypes from 'prop-types'\nimport { Character } from \"../Character\";\n\nexport const CharactersList = ({characters}) => {\n  return (\n    characters.map(character => (\n      <Character\n        key={shortid.generate()}\n        name={character.name}\n        birthYear={character.birth_year}\n      />\n    ))\n  )\n}\n\nCharactersList.propTypes = {\n  characters: PropTypes.arrayOf(\n    PropTypes.shape({\n      name: PropTypes.string.isRequired,\n      birthYear: PropTypes.string.isRequired,\n    })\n  )\n}\n","const API_URL = 'https://swapi.dev';\n\nconst request = (url) => {\n  return fetch(`${API_URL}${url}`)\n    .then(response => {\n      if (response.ok) {\n\n        return response.json();\n      }\n\n      throw new Error(`${response.status} - ${response.statusText}`);\n    })\n}\n\nexport const getCharacters = () =>\n  request('/api/people/');\n","import { useState, useEffect } from 'react';\nimport { CharactersList } from \"../CharactersList\";\nimport { getCharacters } from \"../../api\";\nimport './charactersPage.scss';\n\nexport const CharactersPage = () => {\n  const [characters, setCharacters] = useState([]);\n\n  useEffect(() => {\n    getCharacters()\n      .then(characters => setCharacters(characters.results))\n  }, [])\n\n  return (\n    <section className='main'>\n      <CharactersList\n        characters={characters}\n      />\n    </section>\n  )\n}\n","import './App.scss';\nimport { CharactersPage } from \"./components/CharactersPage\";\n\nfunction App() {\n  return (\n    <CharactersPage />\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}